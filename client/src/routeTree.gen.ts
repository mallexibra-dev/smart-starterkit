/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as R404RouteImport } from './routes/404'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TransactionsIndexRouteImport } from './routes/transactions/index'
import { Route as ProductsIndexRouteImport } from './routes/products/index'
import { Route as AnalyticsIndexRouteImport } from './routes/analytics/index'
import { Route as TransactionsNewRouteImport } from './routes/transactions/new'
import { Route as ProductsNewRouteImport } from './routes/products/new'
import { Route as ProductsIdEditRouteImport } from './routes/products/[$id]/edit'

const R404Route = R404RouteImport.update({
  id: '/404',
  path: '/404',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TransactionsIndexRoute = TransactionsIndexRouteImport.update({
  id: '/transactions/',
  path: '/transactions/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsIndexRoute = ProductsIndexRouteImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => rootRouteImport,
} as any)
const AnalyticsIndexRoute = AnalyticsIndexRouteImport.update({
  id: '/analytics/',
  path: '/analytics/',
  getParentRoute: () => rootRouteImport,
} as any)
const TransactionsNewRoute = TransactionsNewRouteImport.update({
  id: '/transactions/new',
  path: '/transactions/new',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsNewRoute = ProductsNewRouteImport.update({
  id: '/products/new',
  path: '/products/new',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsIdEditRoute = ProductsIdEditRouteImport.update({
  id: '/products/$id/edit',
  path: '/products/$id/edit',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/404': typeof R404Route
  '/products/new': typeof ProductsNewRoute
  '/transactions/new': typeof TransactionsNewRoute
  '/analytics': typeof AnalyticsIndexRoute
  '/products': typeof ProductsIndexRoute
  '/transactions': typeof TransactionsIndexRoute
  '/products/$id/edit': typeof ProductsIdEditRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/404': typeof R404Route
  '/products/new': typeof ProductsNewRoute
  '/transactions/new': typeof TransactionsNewRoute
  '/analytics': typeof AnalyticsIndexRoute
  '/products': typeof ProductsIndexRoute
  '/transactions': typeof TransactionsIndexRoute
  '/products/$id/edit': typeof ProductsIdEditRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/404': typeof R404Route
  '/products/new': typeof ProductsNewRoute
  '/transactions/new': typeof TransactionsNewRoute
  '/analytics/': typeof AnalyticsIndexRoute
  '/products/': typeof ProductsIndexRoute
  '/transactions/': typeof TransactionsIndexRoute
  '/products/$id/edit': typeof ProductsIdEditRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/404'
    | '/products/new'
    | '/transactions/new'
    | '/analytics'
    | '/products'
    | '/transactions'
    | '/products/$id/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/404'
    | '/products/new'
    | '/transactions/new'
    | '/analytics'
    | '/products'
    | '/transactions'
    | '/products/$id/edit'
  id:
    | '__root__'
    | '/'
    | '/404'
    | '/products/new'
    | '/transactions/new'
    | '/analytics/'
    | '/products/'
    | '/transactions/'
    | '/products/$id/edit'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  R404Route: typeof R404Route
  ProductsNewRoute: typeof ProductsNewRoute
  TransactionsNewRoute: typeof TransactionsNewRoute
  AnalyticsIndexRoute: typeof AnalyticsIndexRoute
  ProductsIndexRoute: typeof ProductsIndexRoute
  TransactionsIndexRoute: typeof TransactionsIndexRoute
  ProductsIdEditRoute: typeof ProductsIdEditRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/404': {
      id: '/404'
      path: '/404'
      fullPath: '/404'
      preLoaderRoute: typeof R404RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/transactions/': {
      id: '/transactions/'
      path: '/transactions'
      fullPath: '/transactions'
      preLoaderRoute: typeof TransactionsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/': {
      id: '/products/'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/analytics/': {
      id: '/analytics/'
      path: '/analytics'
      fullPath: '/analytics'
      preLoaderRoute: typeof AnalyticsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/transactions/new': {
      id: '/transactions/new'
      path: '/transactions/new'
      fullPath: '/transactions/new'
      preLoaderRoute: typeof TransactionsNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/new': {
      id: '/products/new'
      path: '/products/new'
      fullPath: '/products/new'
      preLoaderRoute: typeof ProductsNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/$id/edit': {
      id: '/products/$id/edit'
      path: '/products/$id/edit'
      fullPath: '/products/$id/edit'
      preLoaderRoute: typeof ProductsIdEditRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  R404Route: R404Route,
  ProductsNewRoute: ProductsNewRoute,
  TransactionsNewRoute: TransactionsNewRoute,
  AnalyticsIndexRoute: AnalyticsIndexRoute,
  ProductsIndexRoute: ProductsIndexRoute,
  TransactionsIndexRoute: TransactionsIndexRoute,
  ProductsIdEditRoute: ProductsIdEditRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
